# FPS of the video
fps = 29.97
# Coordinates to the goal pipes
pipes_x = 1890
lpipe_y = 395
rpipe_y = 455
# Set filepaths and read the rink
# This file path should contain the hockey rink images and all the sequences
filepath = 'FinalGoalShots/'
# The current structure of the sequences is as follows: The file path determined by the filepath variable contains folders named with the game number, followed by 'p', followed by the period number, Each period folder contains a folder named 'Sequences'. That folder contains the sequence folders that have all the relevant sequence data. sequence_folders is used to hold them.
games = c(24, 27, 33, 34)
# Only take the first and third periods. These are when the opposing team shoots on our goal. Our shots only accounted for about a fifth of shots, and removing them makes the data more consistent
periods = map(games, ~ str_c(., 'p', c(1, 3))) %>% unlist
# Get the 'Sequences' folder for every period
period_folders = map(periods, ~ {
str_c(filepath, ., '/Sequences')
})
# Get every folder inside each 'Sequences' folder
sequence_folders = period_folders %>%
map(~ str_c(., '/', list.files(.))) %>%
unlist
# Read the rink images and format them to a raster used for graphing
rink_raster = makeRaster(filepath, 'Rink_Template.jpeg')
# Set filepaths and read the rink
# This file path should contain the hockey rink images and all the sequences
filepath = 'FinalGoalShots/'
# The current structure of the sequences is as follows: The file path determined by the filepath variable contains folders named with the game number, followed by 'p', followed by the period number, Each period folder contains a folder named 'Sequences'. That folder contains the sequence folders that have all the relevant sequence data. sequence_folders is used to hold them.
games = c(24, 27, 33, 34)
# Only take the first and third periods. These are when the opposing team shoots on our goal. Our shots only accounted for about a fifth of shots, and removing them makes the data more consistent
periods = map(games, ~ str_c(., 'p', c(1, 3))) %>% unlist
# Get the 'Sequences' folder for every period
period_folders = map(periods, ~ {
str_c(filepath, ., '/Sequences')
})
# Get every folder inside each 'Sequences' folder
sequence_folders = period_folders %>%
map(~ str_c(., '/', list.files(.))) %>%
unlist
# Read the rink images and format them to a raster used for graphing
rink_raster = makeRaster(filepath, 'Rink_Template.jpeg')
filepath = 'FinalGoalShots/'
games = c(24, 27, 33, 34)
periods = map(games, ~ str_c(., 'p', c(1, 3))) %>% unlist
period_folders = map(periods, ~ {
str_c(filepath, ., '/Sequences')
})
sequence_folders = period_folders %>%
map(~ str_c(., '/', list.files(.))) %>%
unlist
View(makeRaster)
rink_raster = makeRaster(filepath, 'Rink_Template.jpeg')
half_rink_raster = makeRaster(filepath, 'Half_Rink_Template.jpeg')
# Set filepaths and read the rink
# This file path should contain the hockey rink images and all the sequences
filepath = 'FinalGoalShots/'
# The current structure of the sequences is as follows: The file path determined by the filepath variable contains folders named with the game number, followed by 'p', followed by the period number, Each period folder contains a folder named 'Sequences'. That folder contains the sequence folders that have all the relevant sequence data. sequence_folders is used to hold them.
games = c(24, 27, 33, 34)
# Only take the first and third periods. These are when the opposing team shoots on our goal. Our shots only accounted for about a fifth of shots, and removing them makes the data more consistent
periods = map(games, ~ str_c(., 'p', c(1, 3))) %>% unlist
# Get the 'Sequences' folder for every period
period_folders = map(periods, ~ {
str_c(filepath, ., '/Sequences')
})
# Get every folder inside each 'Sequences' folder
sequence_folders = period_folders %>%
map(~ str_c(., '/', list.files(.))) %>%
unlist
# Read the rink images and format them to a raster used for graphing
rink_raster = makeRaster(filepath, 'Rink_Template.jpeg')
half_rink_raster = makeRaster(filepath, 'Half_Rink_Template.jpeg')
# As every folder is run through the combinePasses function, the info.csv file in each sequence folder is read and its contents inserted as a row in info
info = matrix(0, nrow = 0, ncol = 4) %>%
data.frame %>%
set_names(c('possessionFrame', 'shotFrame', 'outcome', 'rightHanded'))
# Read in all the sequences
sequences = sequence_folders %>% map(combinePasses)
# Change outcomes to more verbose names
info$outcome %<>% fct_recode(Goal = 'G', Save = 'GB', 'Defender Block' = 'DB', Miss = 'M')
# Get stats for the shot in every sequence
shots_stats.df = seq_along(sequences) %>%
map_dfr(goalShotStats) %>%
# Some models can't use logical data
mutate_if(is.logical, as.numeric)
# Split data into training and validation sets
outcomes.goal = (info$outcome == 'Goal') %>% as.numeric %>% as.factor
set.seed(300)
train_ratio = 1 / 2
t_ind = sample(1:nrow(shots_stats.df), nrow(shots_stats.df) * train_ratio)
v_ind = (1:nrow(shots_stats.df))[-t_ind]
t_shots.df = shots_stats.df[t_ind,] %>%
# Equivalent to rownames(t_shots.df) = NULL
'rownames<-'(NULL)
v_shots.df = shots_stats.df[v_ind,] %>%
'rownames<-'(NULL)
t_goals = outcomes.goal[t_ind]
v_goals = outcomes.goal[v_ind]
# Evaluate the combinations of different classification and feature selection algorithms. Choosing your model entirely based on this is a bad idea because it is highly sensitive to randomness and how the data was split
set.seed(300)
# Set alpha levels for lasso and correlation analysis
lasso_thresh = 0.1
cor_thresh = 0.4
# All features
all_ft = 1:ncol(t_shots.df)
# Lasso features
las_initial = glmfit=glmnet(t_shots.df,t_goals,family="binomial",alpha=1,nlambda=500,standardize=FALSE)
las_coefs = coef(las_initial, s = lasso_thresh) %>% (\(x) x[2:nrow(x)])
las_ft =  las_coefs %>% as.logical
# Correlation features
cor_coefs = t_shots.df %>% map_dbl(~ cor.test(., t_goals %>% as.numeric)$p.value)
cor_ft = cor_coefs < cor_thresh
# Boruta features along with one that includes undecided
bor_ft = Boruta(t_goals ~ ., t_shots.df)$finalDecision == 'Confirmed'
bor_tent_ft = Boruta(t_goals ~ ., t_shots.df)$finalDecision != 'Rejected'
model_funcs = list(randomForest, lda, glmnet)
model_names = list('RF', 'LDA', 'Logistic')
feat_selections = list(las_ft, cor_ft, bor_ft, bor_tent_ft, all_ft)
feat_names = list('lasso', 'correlation', 'boruta', 'boruta tentative', 'all')
set.seed(300)
# Create tables that have every combination of model and feature selection and give their balanced accuracy and PR AUC
balanced_accs = outer(model_funcs, feat_selections, Vectorize(\(x, y) makeModel(x, y)$acc)) %>%
set_rownames(model_names) %>%
set_colnames(feat_names)
praucs = outer(model_funcs, feat_selections, Vectorize(\(x, y) makeModel(x, y)$prauc)) %>%
set_rownames(model_names) %>%
set_colnames(feat_names)
kable(balanced_accs, caption = 'Balanced Accuracy')
kable(praucs, caption = 'PR AUC')
kable(colnames(shots_stats.df)[las_ft] %>% data.frame %>% set_names('Features selected'))
best_model = makeModel(glmnet, las_ft)
pred_scores = predictedProbs(best_model$model, v_shots.df[best_model$features])
true_goal = v_goals %>% fct_recode('No goal' = '0', 'Goal' = '1')
model_performance = cbind.data.frame(pred_scores, true_goal) %>%
set_names(c('pred', 'act')) %>%
mutate(ind = row_number()) %>%
mutate(bin = pred < 0.5)
ggplot(model_performance) +
geom_point(aes(x = ind, y = pred, color = act)) +
scale_color_discrete(type = c('green', 'red')) +
labs(title = 'Predicted probabilities of shots', color = 'Outcome', x = NULL, y = NULL) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text.y = element_blank(),
text = element_text(size = 20))+
facet_grid(bin ~ ., scale='free_y')
ggsave('pred.png')
shap_feat = best_model$features
shap_model = makeModel(best_model$func, features = shap_feat)$model
kernel_shap = kernelshap(shap_model, v_shots.df, v_shots.df, pred_fun = function(obj, X) predictedProbs(obj, X[,shap_feat]))
shap_viz = shapviz(kernel_shap)
sv_importance(shap_viz, kind = 'bar', max_display = sum(shap_feat)) +
theme(text = element_text(size = 20)) +
labs(x = 'Average SHAP Value')
ggsave('bars.png')
sv_importance(shap_viz, kind = 'beeswarm', max_display = sum(shap_feat)) +
# Take out major outliers without causing error
scale_x_continuous(limits = c(-0.4, 0.5), oob = oob_keep)
set.seed(300)
# Create a model that only uses puck distance and angle
heatmap_model = makeModel(best_model$func, c(1, 2))$model
# Calculate the odds of goal for x and y coords across the rink
coord_scores = outer(xsize - (1:(xsize/20) * 10), 1:(ysize/10) * 10, Vectorize(\(x, y) standardized_shot_odds(x, y, shots_stats.df, heatmap_model)))
# Change from wide to long format
coord_scores.df = coord_scores %>%
melt %>%
set_names(c('x', 'y', 'value'))
# Graph the heatmap
halfRinkGraph(coord_scores.df) +
# Fill background with odds for that shot
geom_tile(aes(x = y * 10, y = xsize - x * 10, fill = value, alpha = 0.5)) +
# Dot for each player colored by outcome
geom_point(data = shots_stats.df, aes(color = info$outcome, x = shotStatX(shots_stats.df), y = shotStatY(shots_stats.df)), size = 2) +
scale_fill_gradientn('Odds of goal', colors = c('red', 'orange', 'yellow', 'green')) +
scale_color_discrete('Outcome', type = c('blue', 'green4', 'cyan', 'black')) +
# Remove X and Y labels and alpha legend
labs(y = NULL, x = NULL) +
guides(alpha = 'none') +
theme(text = element_text(size = 20))
ggsave('heatmap.png')
# Using levels only returns entries with that outcome, while using unlevels returns entries without that outcome
outcomeMeans = function(levels = c(), unlevels = unique(info$outcome)){
return(shots_stats.df[info$outcome %in% levels | !info$outcome %in% unlevels,] %>% colMeans)
}
shot_type_stats.m = tibble('Goals' = outcomeMeans('Goal'),
'Nongoals' = outcomeMeans(unlevels = 'Goal'),
'Shots on goal' = outcomeMeans(c('Goal', 'Save')),
'Goalie block' = outcomeMeans('Save'),
'Misses' = outcomeMeans('Miss'),
'Defender block' = outcomeMeans('Defender Block')) %>%
t %>%
'colnames<-'(colnames(shots_stats.df))
splitKable(shot_type_stats.m, 2, sigfigs = 3)
set.seed(100)
n_clust = 3
k_means = kmeans(shots_stats.df, n_clust)
# Add number of points in each cluster to data
cluster_data = cbind(k_means$size, k_means$centers)
colnames(cluster_data)[1] = 'Number of players'
splitKable(cluster_data, 2, sigfigs = 3)
# Graph the rink with players colored by cluster
halfRinkGraph(shots_stats.df) +
geom_point(aes(color = k_means$cluster, x = shotStatX(shots_stats.df), y = shotStatY(shots_stats.df))) +
scale_color_stepsn(colors = c('green', 'purple', 'yellow'))
corrMatrix(shots_stats.df, thresh = 0.005)
angle_means = shots_stats.df %>%
group_by(rightHanded) %>%
summarise(mean(puckAngle)) %>%
set_names(c('rightHanded', 'meanAngle')) %>%
# Data for graphing
mutate(xstart = ysize / 2) %>%
mutate(ystart = pipes_x) %>%
mutate(radius = 300)
halfRinkGraph(shots_stats.df) +
# Graph players colored by handedness
geom_point(aes(color = as.logical(rightHanded), x = shotStatX(shots_stats.df), y = shotStatY(shots_stats.df))) +
scale_color_discrete('Handedness', type = c('green1', 'red'), labels = c('Left', 'Right')) +
new_scale_color() +
# Arrow pointing to average direction
geom_spoke(data = angle_means, aes(x = xstart, y = ystart, angle = torad(meanAngle), radius = radius, color = as.logical(rightHanded)), key_glyph = 'abline', linetype = 'dashed', arrow = arrow(), linewidth = 1)+
scale_color_discrete('Average angle', type = c('darkgreen', 'darkred'), labels = c('Left', 'Right')) +
labs(x = NULL, y = NULL)
# Plot histogram distributions of left and right handed player shot angles
ggplot(shots_stats.df %>%
mutate(rightHanded = factor(rightHanded, levels = c(0, 1), labels = c('Left', 'Right')))) +
geom_histogram(aes(x = puckAngle, fill = rightHanded), bins = 180) +
# Reverse the scale so angles on histogram correspond with the rink image
scale_x_reverse() +
scale_fill_discrete(type = c('green', 'red')) +
facet_wrap(~ rightHanded) +
guides('fill' = 'none')
# Plot total distribution of shot angles
ggplot(shots_stats.df) +
geom_histogram(aes(x = puckAngle), bins = 180) +
scale_x_reverse() +
labs(title = 'Both hands')
# Create the dataframe with angle difference, posession time, and outcome
angle_diff = (shots_stats.df['puckAngle'] - shots_stats.df$goalieAngle) %>%
set_names('angle') %>%
mutate(posTime = shots_stats.df$posTime) %>%
mutate(goal = factorBool(outcomes.goal))%>%
mutate(rightHanded = as.factor(shots_stats.df$rightHanded))
hand_averages = angle_diff %>%
group_by(rightHanded) %>%
summarise(across(everything(), mean))
# When adding a list of ggplot objects, it adds each one in turn
histogram_base = list(
geom_histogram(aes(x = angle, fill = rightHanded), bins = 180),
scale_x_continuous(breaks = breaks_extended(n = 20)),
geom_dotplot(data = angle_diff[outcomes.goal %>% factorBool, ], aes(x = angle, y = -0.1, fill = rightHanded), stackdir = 'down', binwidth = 5, stackgroups = TRUE, binpositions = 'all'),
geom_point(data = hand_averages, aes(x = angle, y = -1, color = rightHanded), shape = 0)
)
# Plot the histogram of all angle differences
ggplot(angle_diff) +
histogram_base
# Plot the histogram of
ggplot(angle_diff[info$outcome %in% c('Goal', 'Save'), ]) +
histogram_base +
labs(title = 'On goal')
# When this file is knitted, don't show code or any output by default
knitr::opts_chunk$set(echo = FALSE, results = 'hide', message = FALSE, warning = FALSE)
# All functions are contained in this file. If it doesn't load, try changing the directory
source("AnalysisCodeFunc.R")
# Add packages to library
r = getOption("repos")
r["CRAN"] = "http://cran.rstudio.com"
options(repos = r)
# Plotting
library(jpeg)
library(grid)
library(ggnewscale)
library(scales)
# Goal shot stats
library(reshape2)
library(randomForest)
library(glmnet)
library(MASS)
library(Boruta)
library(MLmetrics)
library(kernelshap)
library(shapviz)
library(knitr)
library(tidyverse)
library(magrittr)
# Size of rink image and of all plots
xsize <- 2000
ysize <- 850
# FPS of the video
fps <- 29.97
# Coordinates to the goal pipes
pipes_x <- 1890
lpipe_y <- 395
rpipe_y <- 455
# Set filepaths and read the rink
# This file path should contain the hockey rink images and all the sequences
filepath <- 'FinalGoalShots/'
# The current structure of the sequences is as follows: The file path determined by the filepath variable contains folders named with the game number, followed by 'p', followed by the period number, Each period folder contains a folder named 'Sequences'. That folder contains the sequence folders that have all the relevant sequence data. sequence_folders is used to hold them.
games <- c(24, 27, 33, 34)
# Only take the first and third periods. These are when the opposing team shoots on our goal. Our shots only accounted for about a fifth of shots, and removing them makes the data more consistent
periods <- map(games, ~ str_c(., 'p', c(1, 3))) %>% unlist
# Get the 'Sequences' folder for every period
period_folders <- map(periods, ~ {
str_c(filepath, ., '/Sequences')
})
# Get every folder inside each 'Sequences' folder
sequence_folders <- period_folders %>%
map(~ str_c(., '/', list.files(.))) %>%
unlist
# Read the rink images and format them to a raster used for graphing
rink_raster <- makeRaster(filepath, 'Rink_Template.jpeg')
half_rink_raster <- makeRaster(filepath, 'Half_Rink_Template.jpeg')
# As every folder is run through the combinePasses function, the info.csv file in each sequence folder is read and its contents inserted as a row in info
info <- matrix(0, nrow = 0, ncol = 4) %>%
data.frame %>%
set_names(c('possessionFrame', 'shotFrame', 'outcome', 'rightHanded'))
# Read in all the sequences
sequences = sequence_folders %>% map(combinePasses)
# Change outcomes to more verbose names
info$outcome %<>% fct_recode(Goal = 'G', Save = 'GB', 'Defender Block' = 'DB', Miss = 'M')
# Get stats for the shot in every sequence
shots_stats.df <- seq_along(sequences) %>%
map_dfr(goalShotStats) %>%
# Some models can't use logical data
mutate_if(is.logical, as.numeric)
# Split data into training and validation sets
outcomes.goal <- (info$outcome == 'Goal') %>% as.numeric %>% as.factor
set.seed(300)
train_ratio <- 1 / 2
t_ind <- sample(1:nrow(shots_stats.df), nrow(shots_stats.df) * train_ratio)
v_ind <- (1:nrow(shots_stats.df))[-t_ind]
t_shots.df <- shots_stats.df[t_ind,] %>%
# Equivalent to rownames(t_shots.df) = NULL
'rownames<-'(NULL)
v_shots.df <- shots_stats.df[v_ind,] %>%
'rownames<-'(NULL)
t_goals <- outcomes.goal[t_ind]
v_goals <- outcomes.goal[v_ind]
# Evaluate the combinations of different classification and feature selection algorithms. Choosing your model entirely based on this is a bad idea because it is highly sensitive to randomness and how the data was split
set.seed(300)
# Set alpha levels for lasso and correlation analysis
lasso_thresh <- 0.1
cor_thresh <- 0.4
# All features
all_ft <- 1:ncol(t_shots.df)
# Lasso features
las_initial <- glmfit=glmnet(t_shots.df,t_goals,family="binomial",alpha=1,nlambda=500,standardize=FALSE)
las_initial = glmfit=glmnet(t_shots.df,t_goals,family="binomial",alpha=1,nlambda=500,standardize=FALSE)
las_initial <- glmnet(t_shots.df,t_goals,family="binomial",alpha=1,nlambda=500,standardize=FALSE)
glmfit <- glmnet(t_shots.df,t_goals,family="binomial",alpha=1,nlambda=500,standardize=FALSE)
# Evaluate the combinations of different classification and feature selection algorithms. Choosing your model entirely based on this is a bad idea because it is highly sensitive to randomness and how the data was split
set.seed(300)
# Set alpha levels for lasso and correlation analysis
lasso_thresh <- 0.1
cor_thresh <- 0.4
# All features
all_ft <- 1:ncol(t_shots.df)
# Lasso features
las_initial <- glmnet(t_shots.df,t_goals,family="binomial",alpha=1,nlambda=500,standardize=FALSE)
glmfit <- glmnet(t_shots.df,t_goals,family="binomial",alpha=1,nlambda=500,standardize=FALSE)
las_coefs <- coef(las_initial, s = lasso_thresh) %>% (\(x) x[2:nrow(x)])
las_ft <-  las_coefs %>% as.logical
# Correlation features
cor_coefs <- t_shots.df %>% map_dbl(~ cor.test(., t_goals %>% as.numeric)$p.value)
cor_ft <- cor_coefs < cor_thresh
# Boruta features along with one that includes undecided
bor_ft <- Boruta(t_goals ~ ., t_shots.df)$finalDecision == 'Confirmed'
bor_tent_ft <- Boruta(t_goals ~ ., t_shots.df)$finalDecision != 'Rejected'
model_funcs <- list(randomForest, lda, glmnet)
model_names <- list('RF', 'LDA', 'Logistic')
feat_selections <- list(las_ft, cor_ft, bor_ft, bor_tent_ft, all_ft)
feat_names <- list('lasso', 'correlation', 'boruta', 'boruta tentative', 'all')
# Add packages to library
r = getOption("repos")
r["CRAN"] = "http://cran.rstudio.com"
options(repos = r)
# Plotting
library(jpeg)
library(grid)
library(ggnewscale)
library(scales)
# Goal shot stats
library(reshape2)
library(randomForest)
library(glmnet)
library(MASS)
library(Boruta)
library(MLmetrics)
library(kernelshap)
library(shapviz)
library(knitr)
library(tidyverse)
library(magrittr)
# When this file is knitted, don't show code or any output by default
knitr::opts_chunk$set(echo = FALSE, results = 'hide', message = FALSE, warning = FALSE)
# All functions are contained in this file. If it doesn't load, try changing the directory
source("AnalysisCodeFunc.R")
# Size of rink image and of all plots
xsize <- 2000
ysize <- 850
# FPS of the video
fps <- 29.97
# Coordinates to the goal pipes
pipes_x <- 1890
lpipe_y <- 395
rpipe_y <- 455
# Set filepaths and read the rink
# This file path should contain the hockey rink images and all the sequences
filepath <- 'FinalGoalShots/'
# The current structure of the sequences is as follows: The file path determined by the filepath variable contains folders named with the game number, followed by 'p', followed by the period number, Each period folder contains a folder named 'Sequences'. That folder contains the sequence folders that have all the relevant sequence data. sequence_folders is used to hold them.
games <- c(24, 27, 33, 34)
# Only take the first and third periods. These are when the opposing team shoots on our goal. Our shots only accounted for about a fifth of shots, and removing them makes the data more consistent
periods <- map(games, ~ str_c(., 'p', c(1, 3))) %>% unlist
# Get the 'Sequences' folder for every period
period_folders <- map(periods, ~ {
str_c(filepath, ., '/Sequences')
})
# Get every folder inside each 'Sequences' folder
sequence_folders <- period_folders %>%
map(~ str_c(., '/', list.files(.))) %>%
unlist
# Read the rink images and format them to a raster used for graphing
rink_raster <- makeRaster(filepath, 'Rink_Template.jpeg')
half_rink_raster <- makeRaster(filepath, 'Half_Rink_Template.jpeg')
# As every folder is run through the `combinePasses` function, the info.csv file in each sequence folder is read and its contents inserted as a row in info
info <- matrix(0, nrow = 0, ncol = 4) %>%
data.frame %>%
set_names(c('possessionFrame', 'shotFrame', 'outcome', 'rightHanded'))
# Read in all the sequences
sequences = sequence_folders %>% map(combinePasses)
# Change outcomes to more verbose names
info$outcome %<>% fct_recode(Goal = 'G', Save = 'GB', 'Defender Block' = 'DB', Miss = 'M')
# Get stats for the shot in every sequence
shots_stats.df <- seq_along(sequences) %>%
map_dfr(goalShotStats) %>%
# Some models can't use logical data
mutate_if(is.logical, as.numeric)
# Split data into training and validation sets
outcomes.goal <- (info$outcome == 'Goal') %>% as.numeric %>% as.factor
set.seed(300)
train_ratio <- 1 / 2
t_ind <- sample(1:nrow(shots_stats.df), nrow(shots_stats.df) * train_ratio)
v_ind <- (1:nrow(shots_stats.df))[-t_ind]
t_shots.df <- shots_stats.df[t_ind,] %>%
# Equivalent to rownames(t_shots.df) = NULL
'rownames<-'(NULL)
v_shots.df <- shots_stats.df[v_ind,] %>%
'rownames<-'(NULL)
t_goals <- outcomes.goal[t_ind]
v_goals <- outcomes.goal[v_ind]
# Evaluate the combinations of different classification and feature selection algorithms. Choosing your model entirely based on this is a bad idea because it is highly sensitive to randomness and how the data was split
set.seed(300)
# Set alpha levels for lasso and correlation analysis
lasso_thresh <- 0.1
cor_thresh <- 0.4
# All features
all_ft <- 1:ncol(t_shots.df)
# Lasso features
las_initial <- glmnet(t_shots.df,t_goals,family="binomial",alpha=1,nlambda=500,standardize=FALSE)
glmfit <- glmnet(t_shots.df,t_goals,family="binomial",alpha=1,nlambda=500,standardize=FALSE)
las_coefs <- coef(las_initial, s = lasso_thresh) %>% (\(x) x[2:nrow(x)])
las_ft <-  las_coefs %>% as.logical
# Correlation features
cor_coefs <- t_shots.df %>% map_dbl(~ cor.test(., t_goals %>% as.numeric)$p.value)
cor_ft <- cor_coefs < cor_thresh
# Boruta features along with one that includes undecided
bor_ft <- Boruta(t_goals ~ ., t_shots.df)$finalDecision == 'Confirmed'
bor_tent_ft <- Boruta(t_goals ~ ., t_shots.df)$finalDecision != 'Rejected'
model_funcs <- list(randomForest, lda, glmnet)
model_names <- list('RF', 'LDA', 'Logistic')
feat_selections <- list(las_ft, cor_ft, bor_ft, bor_tent_ft, all_ft)
feat_names <- list('lasso', 'correlation', 'boruta', 'boruta tentative', 'all')
set.seed(300)
# Create tables that have every combination of model and feature selection and give their balanced accuracy and PR AUC
balanced_accs <- outer(model_funcs, feat_selections, Vectorize(\(x, y) makeModel(x, y)$acc)) %>%
set_rownames(model_names) %>%
set_colnames(feat_names)
praucs <- outer(model_funcs, feat_selections, Vectorize(\(x, y) makeModel(x, y)$prauc)) %>%
set_rownames(model_names) %>%
set_colnames(feat_names)
kable(balanced_accs, caption = 'Balanced Accuracy')
kable(praucs, caption = 'PR AUC')
kable(colnames(shots_stats.df)[las_ft] %>% data.frame %>% set_names('Features selected'))
best_model <- makeModel(glmnet, las_ft)
pred_scores <- predictedProbs(best_model$model, v_shots.df[best_model$features])
true_goal <- v_goals %>% fct_recode('No goal' = '0', 'Goal' = '1')
model_performance <- cbind.data.frame(pred_scores, true_goal) %>%
set_names(c('pred', 'act')) %>%
mutate(ind = row_number()) %>%
mutate(bin = pred < 0.5)
# Create plot
ggplot(model_performance) +
geom_point(aes(x = ind, y = pred, color = act)) +
scale_color_discrete(type = c('green', 'red')) +
labs(title = 'Predicted probabilities of shots', color = 'Outcome', x = NULL, y = NULL) +
theme(axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
strip.background = element_blank(),
strip.text.y = element_blank(),
text = element_text(size = 20))+
facet_grid(bin ~ ., scale='free_y')
ggsave('pred.png')
shap_feat <- best_model$features
shap_model <- makeModel(best_model$func, features = shap_feat)$model
kernel_shap <- kernelshap(shap_model, v_shots.df, v_shots.df, pred_fun = function(obj, X) predictedProbs(obj, X[,shap_feat]))
shap_viz <- shapviz(kernel_shap)
sv_importance(shap_viz, kind = 'bar', max_display = sum(shap_feat)) +
theme(text = element_text(size = 20)) +
labs(x = 'Average SHAP Value')
ggsave('bars.png')
sv_importance(shap_viz, kind = 'beeswarm', max_display = sum(shap_feat)) +
# Take out major outliers without causing error
scale_x_continuous(limits = c(-0.4, 0.5), oob = oob_keep)
setwd("~/Desktop/Hockey_Fall_2023")
